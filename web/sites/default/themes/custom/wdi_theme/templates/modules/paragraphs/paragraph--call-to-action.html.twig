{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'wrapper-container',
    'p-cta'
] %}
{% block paragraph %}
    <div{{ attributes.addClass(classes) }}>
        <div class="container">
            <div class="row">
                <div class="col-sm-8 col-sm-offset-2">
                    <h2>{{ content.field_title }}</h2>
                        {{ content.field_body }}
                        <a href="{{ content.field_button[0]['#url'] }}" class="button">{{ content.field_button[0]['#title'] }}</a>
                </div>
            </div>
        </div>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 129" class="curve-container">
            <path d="M0 110c99 0 183.5-1.833 253.5-5.5 105-5.5 296-26.5 431-45.5s325-47 455-53c86.667-4 186.833-6 300.5-6v129H0v-19z"/>
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 146" class="curve-container-opacity">
            <defs>
                <linearGradient id="a" x1="4.415%" y1="50%" y2="50%">
                    <stop class="fade-stop-1" offset="0%"/>
                    <stop class="fade-stop-2" offset="97.665%"/>
                </linearGradient>
            </defs>
            <path fill="url(#a)" fill-opacity=".4" fill-rule="evenodd"
                  d="M0 68.657c103.333 20.38 188.333 30.57 255 30.57 100 0 293.5-11.526 428.5-30.57C818.5 49.614 1010 9.021 1140 3.007c86.667-4.01 186.667-4.01 300 0V146H0V68.657z"/>
        </svg>
    </div>
{% endblock paragraph %}
